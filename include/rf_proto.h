/*
 * rf_proto.h
 *
 *  Created on: 04 сент. 2018 г.
 *      Author: Gennady Tanchin <g.tanchin@yandex.ru>
 */

#ifndef RF_PROTO_H_
#define RF_PROTO_H_

#include <stdlib.h>
#include "my_time.h"
#include "ir_proto.h"
/*
 * Тип      Название            Номер   Назначение                                  Формат данных               Ед. измерения
 * устр.                        типа
 *                              устр.
 *
 * Датчик    Термодатчик         0       Измерение температуры воздуха               знаковое целое    16бит     0.1 гр.Ц
 * Датчик    Термодатчик воды    1       Измерение температуры водоснабжения         знаковое целое    16бит     0.1 гр.Ц
 * Датчик    Термодатчик воды    2       Измерение температуры отопления             знаковое целое    16бит     0.1 гр.Ц
 * Датчик    Датчик освещенности 3       Измерение освещенности                      беззнаковое целое 16бит     0.1 люкс
 * Датчик    Датчик влажности    4       Измерение относительной  влажности воздуха  беззнаковое целое 8бит      1 %
 * Датчик    Датчик протечки     5       Определение наличия/отсутствия воды         логическое        (Да/Нет)  1 бит
 * Датчик    Датчик счетчика     6       Считывание импульсов счетчика               беззнаковое       8/16/32   1 импульс
 *                                       электроэнергии, воды, газа и т.п.                             бит
 * Датчик    Датчик контакта     7       Определение открытия/закрытия двери,        логическое        (Да/Нет)  1 бит
 *                                       окна, концевой датчик и т.п.
 * Датчик    Датчик дыма         8       Определение  наличия/отсутствия дыма (пыли) логическое        (Да/Нет)  1 бит
 * Датчик    Датчик пламени      9       Определение  наличия/отсутствия пламени     логическое        (Да/Нет)  1 бит
 * Датчик    Датчик присутствия  10      Определение  наличия/отсутствия объекта     логическое        (Да/Нет)  1 бит
 * Датчик    Датчик движения     11      Определение  наличия/отсутствия движения    целое          (три состояния: + / 0 / -) 1 байт
 * Датчик    ИК считыватель      12      Считывание управляющих последовательностей  блок данных                 1 байт
 * Датчик    Часы реального      13      Показания часов реальн. врем.               UnixTime (4байт)+           1 сек +
 *           времени                                                                 субсекутды(1байт)           1/256 сек
 *--------------------------------------------------------------------------------------------------------------------------------------
 * Тип                          Название  Номер   Назначение                          Формат данных                 Ед. измерения
 * устр.                                  типа
 *                                        устр.

 * Исполнительное устройство   Реле        14  Включение/выключение нагрузки           логическое (Да/Нет) 1 бит
 * Исполнительное устройство   Термореле   15  Включение/выключение                    знаковое целое      16бит     0.1 гр.Ц
 *                                             нагревателя/охладителя
 * Исполнительное устройство   ИК пульт    16  ИК управление                           блок данных         1 байт
 *                             управления
 * Исполнительное устройство   Привод      17  Управление положением задвижки/крана    знаковое целое      8/16 бит  1 гр. угл.
 *                             задвижки/
 *                             крана
 * Исполнительное устройство   Привод      18  Управление линейным перемещением
 *                             двигателя       (привод штор, ворот, … )                знаковое целое      8/16/32   1 мм.
 *                             линейного                                                                   бит
 *                             перемещения
 * Исполнительное устройство   Шаговый     19  Шаговое управление механизмами          знаковое целое      8/16/32   1 шаг
 *                             двигатель                                                                   бит
 * Исполнительное устройство   Часы        20  Календарь, часы, будильник, таймер      UnixTime (4байт)+
 *                             реального                                               субсекутды(1 байт)             1 сек + 1/256 сек
 *                             времени
 *
 */

// Типы датчиков
typedef enum {
  SENS_TYPE_TO = 0,         // Температура воздуха
  SENS_TYPE_TWATER = 1,     // Температура воды
  SENS_TYPE_THEART = 2,     // Температура системы отопления
  SENS_TYPE_LS = 3,         // Освещенности
  SENS_TYPE_COUNT = 6,      // Счетчик импульсов
  SENS_TYPE_SW = 7,         // Контктный
  SENS_TYPE_PIR = 11,       // ИК Движения
  DRIV_TYPE_REL = 14,       // Исп.устр. РЕЛЕ
  DRIV_TYPE_IRCTL = 17,     // Исп.устр. Контр. кондиционера
  SENS_TYPE_REM = 24,       // Электросчетчик
} eSensType;

// Список команд от Центрального Устройства к Конечному
typedef enum {
  CMD_QUERY_RTC = 1,      // Запрос ЧРВ
  CMD_CONN_RESP,          // Отклик на запрос установки связи
  CMD_RFCFG,              // Сетевая конфигурация
  CMD_RFCFG_RESP_OK,      // Подтверждение получения подтверждения получения Сетевой конфигурации (2-е рукопожатие)
  CMD_MESUR_TOUT,         // Интервал измерения, секунд
  CMD_ACCUR,              // Точность представления данных
  CMD_SENS_SEND,          // Значение показаний датчика
  CMD_SENS_RESP,          // ПОдтверждение получения показаний датчика
  CMD_AC_PARAM,           // Установка параметров кондиционера
  CMD_REM_ENRG,           // Запрос потребленной мощности
  CMD_REM_VOLT,           // Запрос действующего напряжения
  CMD_REM_CURR,           // Запрос действующего тока
  CMD_REM_POWER,          // Запрос действующей мощности
  CMD_REM_CURR_MAX,       // Запрос максимального тока
  CMD_REM_CURR_MIN,       // Запрос минимального тока
  CMD_REM_VOLT_MAX,       // Запрос максимального напряжения
  CMD_REM_VOLT_MIN,       // Запрос минимального напряжения
  CMD_REM_POWER_MAX,      // Запрос максимальной мощности
  CMD_REM_CURR_MAX_SET,   // Установка максимально допустимого тока
  CMD_REM_CURR_MIN_SET,   // Установка минимально допустимого тока
  CMD_REM_VOLT_MAX_SET,   // Установка максимально допустимого напряжения
  CMD_REM_VOLT_MIN_SET,   // Установка максимально допустимого напряжения
  CMD_REM_POWER_MAX_SET,  // Установка максимально допустимой мощности
  CMD_REM_CURREN_K,       // Установка коэффициента пересчета измеренного тока
  CMD_REM_VOLT_K,         // Установка коэффициента пересчета измеренного напряжения
} eCmd;

// Список запросов и ошибок выполнения команд - передаются от Конечного устройства к Цетральному
typedef enum {
  // Ошибки
  QUERY_ERR_OK,         // Нет ошибок
  QUERY_ERR_CMD,        // Неправильная команда
  QUERY_ERR_PARAM,      // Ошибка параметра
  QUERY_ERR_EXEC,       // Ошибка выполнения команды
  // Запросы
  QUERY_CONNECT,        // Запрос установки связи
  QUERY_RFCFG_RESP,     // Подтверждение получения Сетевой конфигурации (1-е рукопожатие)
} eQuery;

// Тип конечного устройства
#define DEVICE_TYPE       SENS_TYPE_TO

// Маски типов сообщений
#define MSG_TYPE_BEACON     0      // "Маяковое" сообщение
#define MSG_TYPE_DATA       1      // Сообщение "Данные"
#define MSG_TYPE_RESPONSE   2      // Сообщение отклик
#define MSG_TYPE_QUERY      3      // Резервный тип сообщения

#ifndef __packed
#define __packed __attribute__((packed))
#endif

typedef struct {
  uint8_t cmd;
  tUxTime time;
  uint8_t ms;
} __packed tTimeMsg;

#if ( DEVICE_TYPE == SENS_TYPE_TO )
typedef __aligned(4) struct {
  uint8_t srcNode;    // Адрес отправителя
  struct {
    uint8_t sensType: 6;   // Тип конечного устройства
    uint8_t msgType: 2;   // Тип сообщения
  };
  uint8_t msgNum;     // Номер пакета
  uint8_t batVolt;    // Напряжение батареи питания
  int16_t data;      // Измеренная температура
} __packed tSensMsg;
#endif

//typedef struct {
//  uint8_t srcNode;    // Адрес отправителя
//  uint8_t sensType;   // Тип конечного устройства
//  uint8_t msgNum;     // Номер пакета
//  uint8_t batVolt;    // Напряжение батареи питания
//  uint8_t devState;    // Состояние устройства
//  uint8_t cmdNum;     // Номер последнего принятогосообщения
//  int8_t  devTemp;     // Температура
//} __packed tDriveMsg;

typedef struct {
  uint8_t srcNode;    // Адрес отправителя
  struct {
    uint8_t drvType: 6;   // Тип конечного устройства
    uint8_t msgType: 2;   // Тип сообщения
  };
  uint8_t msgNum;     // Номер пакета
  uint8_t batVolt;    // Напряжение батареи питания
  tAcData acState;    // Состояние устройства
  uint8_t cmdNum;     // Номер последнего принятого сообщения
} __packed tDriveMsg;

// Для устройств с питанием от сети ~220В
//typedef struct {
//  uint8_t srcNode;    // Адрес отправителя
//  struct {
//    uint8_t drvType: 6;   // Тип конечного устройства
//    uint8_t msgType: 2;   // Тип сообщения
//  };
//  uint8_t msgNum;     // Номер пакета
//  uint8_t batVolt;    // Напряжение батареи питания
//  tAcData acState;    // Состояние устройства
//  uint8_t cmdNum;     // Номер последнего принятогосообщения
//} __packed tDriveMsg;
//
typedef struct {
  uint8_t srcNode;    // Адрес, от кого получена команда
  struct {
    uint8_t driveType: 6;  // Тип конечного устройства - для проверки, что команда соответствует получателю
    uint8_t msgType: 2;   // Тип сообщения
  };
  uint8_t cmdNum;     // Номер полученой команды
  uint8_t cmd;
  union {
    tAcData acCmd;    // Состояние устройства
    uint8_t cmdData[6];
  };
} __packed tCmdMsg;

//typedef struct {
//  uint8_t srcNode;        // Адрес отправителя
//  struct {
//    uint8_t sensType: 6;  // Тип конечного устройства
//    uint8_t msgType: 2;   // Тип сообщения
//  };
//  uint8_t msgNum;         // Номер пакета
//  uint8_t query;          // Напряжение батареи питания
//} __packed tQueryMsg;

typedef union {
  uint8_t u8[64];
  tCmdMsg cmdMsg;
  tTimeMsg timeMsg;
//  tSensMsg sensMsg;
  tDriveMsg driveMsg;
//  tQueryMsg queryMsg;
} __packed uPayload;

#endif /* RF_PROTO_H_ */
